type DateTime {
  date: Date
  time: Time
}

scalar Date
scalar Time

type User {
  id: ID!
  first_name: String!
  last_name: String
  username: String!
  email: [String!]!
  phone: [String]!
  created_at: DateTime!
  updated_at: DateTime!
}

type Project {
  id: ID!
  name: String!
  owner: User!
  collaborators: [CollaboratorsPermissions]!
  status: [Status!]!
  created_at: DateTime!
  updated_at: DateTime!
}

type Status {
  id: ID!
  name: String!
  cards: [Card]!
  created_at: DateTime!
  updated_at: DateTime!
}

type CollaboratorsPermissions {
  user: User!
  permissions: [Permission]!
  created_at: DateTime!
  updated_at: DateTime!
}

enum Permission {
  CREATE_CARDS
  UPDATE_CARDS
  DELETE_CARDS
  CREATE_COLLABORATORS
  UPDATE_COLLABORATORS
  DELETE_COLLABORATORS
}

type Card {
  id: ID!
  name: String!
  responsible: [User]!
  sector: [Sector]!
  requirement: [Card]!
  description: String
  complexity: Complexity!
  priority: Priority!
  status: Status!
  delivery_date: DateTime
  created_at: DateTime!
  updated_at: DateTime!
}

enum Sector {
  BACK_END
  FRONT_END
  DESIGN
}

enum Complexity {
  HARD
  MEDIUM
  EASY
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

type Query {
  user(id: ID!): User
  users: [User]!
  project(id: ID!): Project
  projects: [Project]!
  card(id: ID!): Card
  cards: [Card]!
}
